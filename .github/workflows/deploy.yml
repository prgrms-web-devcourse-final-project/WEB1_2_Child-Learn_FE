name: Ijuju frontend deploy

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  DOCKER_IMAGE: ghcr.io/childlearn/ijuju-frontend
  VERSION: ${{ github.sha }}
  NAME: ijuju_frontend

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설치
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          docker push ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: self-hosted
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Pull Docker image
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest

      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:80 \
           -e BACKEND_IP=${{ secrets.BACKEND_IP }} \
           --name ${{ env.NAME }} \
           --restart always \
          -e TZ=Asia/Seoul \
           ${{ env.DOCKER_IMAGE }}:latest \

      - name: Clean up old images
        run: |
          docker image prune -f
